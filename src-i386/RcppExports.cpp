// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>
#include "../inst/include/bigExplore.h"
#include <string>
#include <set>

using namespace Rcpp;

// cbindWriter
void cbindWriter(Rcpp::XPtr<BigMatrix> pA, Rcpp::XPtr<BigMatrix> pB, Rcpp::XPtr<BigMatrix> pC);
RcppExport SEXP bigExplore_cbindWriter(SEXP pASEXP, SEXP pBSEXP, SEXP pCSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::XPtr<BigMatrix> pA = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pASEXP);
    Rcpp::XPtr<BigMatrix> pB = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pBSEXP);
    Rcpp::XPtr<BigMatrix> pC = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pCSEXP);
    cbindWriter(pA, pB, pC);
    return R_NilValue;
END_RCPP
}
// chunkWriter
void chunkWriter(Rcpp::XPtr<BigMatrix> pA, Rcpp::NumericVector data, int start, int chunksize);
RcppExport SEXP bigExplore_chunkWriter(SEXP pASEXP, SEXP dataSEXP, SEXP startSEXP, SEXP chunksizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::XPtr<BigMatrix> pA = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pASEXP);
    Rcpp::NumericVector data = Rcpp::as<Rcpp::NumericVector >(dataSEXP);
    int start = Rcpp::as<int >(startSEXP);
    int chunksize = Rcpp::as<int >(chunksizeSEXP);
    chunkWriter(pA, data, start, chunksize);
    return R_NilValue;
END_RCPP
}
// bigCooksCpp
void bigCooksCpp(Rcpp::XPtr<BigMatrix> pBigMat, Rcpp::XPtr<BigMatrix> pRes, Rcpp::XPtr<BigMatrix> pCooks, arma::colvec coeff, arma::colvec means, arma::mat covInv);
RcppExport SEXP bigExplore_bigCooksCpp(SEXP pBigMatSEXP, SEXP pResSEXP, SEXP pCooksSEXP, SEXP coeffSEXP, SEXP meansSEXP, SEXP covInvSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::XPtr<BigMatrix> pBigMat = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pBigMatSEXP);
    Rcpp::XPtr<BigMatrix> pRes = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pResSEXP);
    Rcpp::XPtr<BigMatrix> pCooks = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pCooksSEXP);
    arma::colvec coeff = Rcpp::as<arma::colvec >(coeffSEXP);
    arma::colvec means = Rcpp::as<arma::colvec >(meansSEXP);
    arma::mat covInv = Rcpp::as<arma::mat >(covInvSEXP);
    bigCooksCpp(pBigMat, pRes, pCooks, coeff, means, covInv);
    return R_NilValue;
END_RCPP
}
// fuzzyFileCpp
void fuzzyFileCpp(Rcpp::XPtr<BigMatrix> pBigMat, double power, double var);
RcppExport SEXP bigExplore_fuzzyFileCpp(SEXP pBigMatSEXP, SEXP powerSEXP, SEXP varSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::XPtr<BigMatrix> pBigMat = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pBigMatSEXP);
    double power = Rcpp::as<double >(powerSEXP);
    double var = Rcpp::as<double >(varSEXP);
    fuzzyFileCpp(pBigMat, power, var);
    return R_NilValue;
END_RCPP
}
// bigLevCpp
void bigLevCpp(Rcpp::XPtr<BigMatrix> pBigMat, Rcpp::XPtr<BigMatrix> pLev, arma::colvec means, arma::mat covInv);
RcppExport SEXP bigExplore_bigLevCpp(SEXP pBigMatSEXP, SEXP pLevSEXP, SEXP meansSEXP, SEXP covInvSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::XPtr<BigMatrix> pBigMat = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pBigMatSEXP);
    Rcpp::XPtr<BigMatrix> pLev = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pLevSEXP);
    arma::colvec means = Rcpp::as<arma::colvec >(meansSEXP);
    arma::mat covInv = Rcpp::as<arma::mat >(covInvSEXP);
    bigLevCpp(pBigMat, pLev, means, covInv);
    return R_NilValue;
END_RCPP
}
// biglmPredictCpp
void biglmPredictCpp(Rcpp::XPtr<BigMatrix> pBigMat, Rcpp::XPtr<BigMatrix> pPred, arma::colvec coeff);
RcppExport SEXP bigExplore_biglmPredictCpp(SEXP pBigMatSEXP, SEXP pPredSEXP, SEXP coeffSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::XPtr<BigMatrix> pBigMat = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pBigMatSEXP);
    Rcpp::XPtr<BigMatrix> pPred = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pPredSEXP);
    arma::colvec coeff = Rcpp::as<arma::colvec >(coeffSEXP);
    biglmPredictCpp(pBigMat, pPred, coeff);
    return R_NilValue;
END_RCPP
}
// biglmResidCpp
void biglmResidCpp(Rcpp::XPtr<BigMatrix> pBigMat, Rcpp::XPtr<BigMatrix> pRes, Rcpp::XPtr<BigMatrix> pResid, arma::colvec coeff);
static SEXP bigExplore_biglmResidCpp_try(SEXP pBigMatSEXP, SEXP pResSEXP, SEXP pResidSEXP, SEXP coeffSEXP) {
BEGIN_RCPP
    Rcpp::XPtr<BigMatrix> pBigMat = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pBigMatSEXP);
    Rcpp::XPtr<BigMatrix> pRes = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pResSEXP);
    Rcpp::XPtr<BigMatrix> pResid = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pResidSEXP);
    arma::colvec coeff = Rcpp::as<arma::colvec >(coeffSEXP);
    biglmResidCpp(pBigMat, pRes, pResid, coeff);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP bigExplore_biglmResidCpp(SEXP pBigMatSEXP, SEXP pResSEXP, SEXP pResidSEXP, SEXP coeffSEXP) {
    Rcpp::RNGScope __rngScope;
    SEXP __result = PROTECT(bigExplore_biglmResidCpp_try(pBigMatSEXP, pResSEXP, pResidSEXP, coeffSEXP));
    Rboolean __isError = Rf_inherits(__result, "try-error");
    UNPROTECT(1);
    if (__isError)
        Rf_error(CHAR(Rf_asChar(__result)));
    return __result;
}
// biglmStandardCpp
void biglmStandardCpp(Rcpp::XPtr<BigMatrix> pBigMat, Rcpp::XPtr<BigMatrix> pRes, Rcpp::XPtr<BigMatrix> pStandard, arma::colvec coeff, arma::colvec means, arma::mat covInv);
RcppExport SEXP bigExplore_biglmStandardCpp(SEXP pBigMatSEXP, SEXP pResSEXP, SEXP pStandardSEXP, SEXP coeffSEXP, SEXP meansSEXP, SEXP covInvSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::XPtr<BigMatrix> pBigMat = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pBigMatSEXP);
    Rcpp::XPtr<BigMatrix> pRes = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pResSEXP);
    Rcpp::XPtr<BigMatrix> pStandard = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pStandardSEXP);
    arma::colvec coeff = Rcpp::as<arma::colvec >(coeffSEXP);
    arma::colvec means = Rcpp::as<arma::colvec >(meansSEXP);
    arma::mat covInv = Rcpp::as<arma::mat >(covInvSEXP);
    biglmStandardCpp(pBigMat, pRes, pStandard, coeff, means, covInv);
    return R_NilValue;
END_RCPP
}
// biglmStudentCpp
void biglmStudentCpp(Rcpp::XPtr<BigMatrix> pBigMat, Rcpp::XPtr<BigMatrix> pRes, Rcpp::XPtr<BigMatrix> pStudent, arma::colvec coeff, arma::colvec means, arma::mat covInv);
RcppExport SEXP bigExplore_biglmStudentCpp(SEXP pBigMatSEXP, SEXP pResSEXP, SEXP pStudentSEXP, SEXP coeffSEXP, SEXP meansSEXP, SEXP covInvSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::XPtr<BigMatrix> pBigMat = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pBigMatSEXP);
    Rcpp::XPtr<BigMatrix> pRes = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pResSEXP);
    Rcpp::XPtr<BigMatrix> pStudent = Rcpp::as<Rcpp::XPtr<BigMatrix> >(pStudentSEXP);
    arma::colvec coeff = Rcpp::as<arma::colvec >(coeffSEXP);
    arma::colvec means = Rcpp::as<arma::colvec >(meansSEXP);
    arma::mat covInv = Rcpp::as<arma::mat >(covInvSEXP);
    biglmStudentCpp(pBigMat, pRes, pStudent, coeff, means, covInv);
    return R_NilValue;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int bigExplore_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("void(*biglmResidCpp)(Rcpp::XPtr<BigMatrix>,Rcpp::XPtr<BigMatrix>,Rcpp::XPtr<BigMatrix>,arma::colvec)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP bigExplore_RcppExport_registerCCallable() { 
    R_RegisterCCallable("bigExplore", "bigExplore_biglmResidCpp", (DL_FUNC)bigExplore_biglmResidCpp_try);
    R_RegisterCCallable("bigExplore", "bigExplore_RcppExport_validate", (DL_FUNC)bigExplore_RcppExport_validate);
    return R_NilValue;
}
